{"version":3,"sources":["components/PadBank/PadBtn/PadBtn.js","components/PadBank/PadBank.js","components/Display.js","components/App/App.js","serviceWorker.js","index.js"],"names":["PadBtn","props","state","btnStyle","playSound","bind","acivateBtn","activateBtn","handleKeyPress","document","addEventListener","this","removeEventListener","e","which","keyWhich","clipId","setState","setTimeout","sound","getElementById","keyTrigger","currentTime","play","handlePadBtn","id","className","onClick","src","clipUrl","React","Component","PadBank","padBank","sounds","map","url","Display","msg","App","displayMsg","replace","handle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"43CAuDeA,G,oEAnDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,kBAEd,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,WAAa,EAAKC,YAAYF,KAAjB,gBAClB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBAPP,E,gEAUfI,SAASC,iBAAiB,UAAWC,KAAKH,kB,6CAG1CC,SAASG,oBAAoB,UAAWD,KAAKH,kB,qCAElCK,GACPA,EAAEC,QAAUH,KAAKV,MAAMc,UACvBJ,KAAKP,UAAUO,KAAKV,MAAMe,U,oCAK9BL,KAAKM,SAAS,CACVd,SAAU,iBAGde,WAAW,WACPP,KAAKM,SAAS,CACVd,SAAU,oBAEhBE,KAAKM,MAAO,O,gCAERE,GAGN,IAAMM,EAAQV,SAASW,eAAeT,KAAKV,MAAMoB,YACjDF,EAAMG,YAAc,EACpBH,EAAMI,OACNZ,KAAKJ,cACLI,KAAKV,MAAMuB,aAAab,KAAKV,MAAMe,U,+BAGnC,OACI,yBAAKS,GAAId,KAAKV,MAAMe,OAAQU,UAAWf,KAAKT,MAAMC,SAAUwB,QAAShB,KAAKP,WACrEO,KAAKV,MAAMoB,WACZ,2BAAOI,GAAId,KAAKV,MAAMoB,WAAYO,IAAKjB,KAAKV,MAAM4B,QAASH,UAAU,c,GA9ChEI,IAAMC,Y,OCwBZC,E,uKArBD,IAAD,OACCC,EAAUC,EAAOC,KAAI,SAAChB,GACxB,OACI,kBAAC,EAAD,CACIM,GAAIN,EAAMM,GACVC,UAAU,WACVF,aAAc,EAAKvB,MAAMuB,aACzBT,SAAUI,EAAMJ,SAChBM,WAAYF,EAAME,WAClBL,OAAQG,EAAMM,GACdI,QAASV,EAAMiB,SAG3B,OACI,yBAAKX,GAAG,YACHQ,O,GAhBKH,IAAMC,WCMbM,G,6KANP,OACI,uBAAGX,UAAU,mCAAmCf,KAAKV,MAAMqC,S,GAHjDR,IAAMC,YC2BbQ,E,kDAxBb,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXsC,WAAY,eAEd,EAAKhB,aAAe,EAAKA,aAAanB,KAAlB,gBALH,E,yDAQNW,GACXL,KAAKM,SAAS,CACZuB,WAAYxB,EAAOyB,QAAQ,KAAM,S,+BAKjC,OACA,yBAAKhB,GAAG,eAAeC,UAAU,uEAC/B,kBAAC,EAAD,CAASD,GAAG,WAAWD,aAAcb,KAAKa,aAAckB,QAAM,IAC9D,kBAAC,EAAD,CAASjB,GAAG,UAAUC,UAAU,eAAeY,IAAK3B,KAAKT,MAAMsC,kB,GAnBrDV,IAAMC,WCOJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASW,eAAe,SDyHpB,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.659ddad9.chunk.js","sourcesContent":["import React from 'react';\nimport './PadBtn.css';\n\nclass PadBtn extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            btnStyle: 'inactive-style' \n        }\n        this.playSound = this.playSound.bind(this);\n        this.acivateBtn = this.activateBtn.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPress);\n    }\n    handleKeyPress(e) {\n        if (e.which === this.props.keyWhich) {\n            this.playSound(this.props.clipId);\n        }    \n    }\n    activateBtn() {\n        // depress button\n        this.setState({\n            btnStyle: 'active-style'\n        });\n        //wait 100ms and release button\n        setTimeout(function() {\n            this.setState({\n                btnStyle: 'inactive-style'\n            });\n        }.bind(this), 100);\n    }\n    playSound(e) {\n        // const sound = document.getElementById(this.props.keyTrigger);\n        // const sound = new Audio(\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\")\n        const sound = document.getElementById(this.props.keyTrigger);\n        sound.currentTime = 0;\n        sound.play()\n        this.activateBtn();\n        this.props.handlePadBtn(this.props.clipId);\n    }\n    render() {\n        return (\n            <div id={this.props.clipId} className={this.state.btnStyle} onClick={this.playSound}>\n                {this.props.keyTrigger}\n                <audio id={this.props.keyTrigger} src={this.props.clipUrl} className=\"clip\" />\n            </div>\n        );\n    }\n}\n\nexport default PadBtn;","import React from 'react';\nimport './PadBank.css';\nimport PadBtn from './PadBtn/PadBtn';\nimport sounds from './sound_map.json';\n\nclass PadBank extends React.Component {\n    render() {\n        const padBank = sounds.map((sound) => {\n            return (\n                <PadBtn\n                    id={sound.id}\n                    className=\"drum-pad\"\n                    handlePadBtn={this.props.handlePadBtn}\n                    keyWhich={sound.keyWhich}\n                    keyTrigger={sound.keyTrigger}\n                    clipId={sound.id}\n                    clipUrl={sound.url} />\n            );\n        });\n        return (\n            <div id=\"pad-bank\">\n                {padBank}\n            </div>\n        );\n    }\n}\n\nexport default PadBank;","import React from 'react';\nimport './Display.css';\n\nclass Display extends React.Component {\n    render () {\n        return (\n            <p className=\"d-block bg-secondary text-white\">{this.props.msg}</p>\n        );\n    }\n}\n\nexport default Display;","import React from 'react';\nimport './App.css';\nimport PadBank from '../PadBank/PadBank';\nimport Display from '../Display';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayMsg: 'Let\\'s rock!'\n    }\n    this.handlePadBtn = this.handlePadBtn.bind(this);\n  }\n\n  handlePadBtn(clipId) {\n    this.setState({\n      displayMsg: clipId.replace(/-/g, ' ')\n    });\n  }\n  \n  render() {\n      return (\n      <div id=\"drum-machine\" className=\"d-flex flex-column vh-100 justify-content-center align-items-center\">\n        <PadBank id=\"pad-bank\" handlePadBtn={this.handlePadBtn} handle/>\n        <Display id=\"display\" className=\"d-block p-50\" msg={this.state.displayMsg} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}